{"version":3,"sources":["App.tsx","reportWebVitals.js","index.js"],"names":["App","useState","sec","setSec","status","setStatus","useEffect","unsubscribe$","Subject","interval","pipe","takeUntil","subscribe","val","next","complete","startWatch","React","stopWatch","resetWatch","clickCount","timeoutID","waitWatch","clearTimeout","setTimeout","className","Date","toISOString","slice","onClick","render","document","getElementById","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","StrictMode"],"mappings":"kQASe,SAASA,IAAO,IAAD,EACNC,mBAAS,GADH,mBACrBC,EADqB,KAChBC,EADgB,OAEAF,mBAAiB,QAFjB,mBAErBG,EAFqB,KAEbC,EAFa,KAI5BC,qBAAU,WACR,IAAMC,EAAe,IAAIC,IAMzB,OALAC,YAAS,KACNC,KAAKC,YAAUJ,IACfK,WAAU,WACM,QAAXR,GAAkBD,GAAO,SAACU,GAAD,OAAcA,EAAM,UAE9C,WACLN,EAAaO,MAAK,GAClBP,EAAaQ,cAEd,CAACX,IAEJ,IAAMY,EAAaC,eAAkB,WACnCZ,EAAU,SACT,IAEGa,EAAYD,eAAkB,WAClCZ,EAAU,QACVF,EAAO,KACN,IAEGgB,EAAaF,eAAkB,WACnCd,EAAO,GACPE,EAAU,SACT,IAECe,EAAa,EACbC,EAAiB,EAEfC,EAAYL,eAAkB,WAGlC,GAAmB,MAFnBG,EAGEA,EAAa,EACbf,EAAU,QACTkB,aAAaF,QAEX,GAAmB,IAAfD,EACP,OAEFC,EAAYG,YAAY,kBAAM,IAAO,OACpC,IAEH,OACE,gCACE,oBAAGC,UAAU,OAAb,cAAsB,IAAIC,KAAKxB,GAAKyB,cAAcC,MAAM,GAAI,OAC5D,wBAAQH,UAAU,MAAMI,QAASb,EAAjC,mBAGA,wBAAQS,UAAU,MAAOI,QAASX,EAAlC,kBAGA,wBAAQW,QAASV,EAAYM,UAAU,MAAvC,mBACA,wBAAQI,QAASP,EAAWG,UAAU,MAAtC,qBAKNK,iBAAO,cAAC,EAAD,IAASC,SAASC,eAAe,SCxExC,IAYeC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASZ,OACP,cAAC,IAAMa,WAAP,UACE,cAAC,EAAD,MAEFZ,SAASC,eAAe,SAM1BC,M","file":"static/js/main.00af57d6.chunk.js","sourcesContent":["import './App.css';\nimport * as React from 'react';\nimport { render } from \"react-dom\";\nimport { useEffect, useState } from \"react\";\nimport { interval, Subject } from \"rxjs\";\nimport { takeUntil } from \"rxjs/operators\";\n\ntype Status = \"run\" | \"stop\" | \"wait\" ;\n \nexport default function App() {\n  const [sec, setSec] = useState(0);\n  const [status, setStatus] = useState<Status>(\"stop\");\n \n  useEffect(() => {\n    const unsubscribe$ = new Subject();\n    interval(1000)\n      .pipe(takeUntil(unsubscribe$))\n      .subscribe(() => {\n        if (status === \"run\") setSec((val: any) => val + 1000);\n      });\n    return () => {\n      unsubscribe$.next(true);\n      unsubscribe$.complete();\n    };\n  }, [status]);\n \n  const startWatch = React.useCallback(() => {\n    setStatus(\"run\");\n  }, []);\n \n  const stopWatch = React.useCallback(() => {\n    setStatus(\"stop\");\n    setSec(0);\n  }, []);\n \n  const resetWatch = React.useCallback(() => {\n    setSec(0);\n    setStatus(\"run\");\n  }, []);\n \n  var clickCount = 0;\n  let timeoutID: any = 0;\n\n  const waitWatch = React.useCallback(() => {\n    clickCount++;\n\n    if (clickCount === 2) {\n      clickCount = 0;\n      setStatus(\"wait\");\n       clearTimeout(timeoutID);\n    }\n    else if (clickCount === 1) {\n      return;\n    }\n    timeoutID = setTimeout((() => true), 300);\n  }, []);\n \n  return (\n    <div>\n      <p className=\"time\"> {new Date(sec).toISOString().slice(11, 19)}</p>\n      <button className=\"btn\" onClick={startWatch}>\n        Start\n      </button>\n      <button className=\"btn\"  onClick={stopWatch}>\n        Stop\n      </button>\n      <button onClick={resetWatch} className=\"btn\">Reset</button>\n      <button onClick={waitWatch} className=\"btn\">Wait</button>\n    </div>\n  );\n}\n \nrender(<App />, document.getElementById(\"root\"));\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}